// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by Reqnroll (https://www.reqnroll.net/).
//      Reqnroll Version:2.0.0.0
//      Reqnroll Generator Version:2.0.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace LudoRegnrollTests.Features
{
    using Reqnroll;
    using System;
    using System.Linq;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Reqnroll", "2.0.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    public partial class SpilhandteringFeature : object, Xunit.IClassFixture<SpilhandteringFeature.FixtureData>, Xunit.IAsyncLifetime
    {
        
        private global::Reqnroll.ITestRunner testRunner;
        
        private static string[] featureTags = ((string[])(null));
        
        private static global::Reqnroll.FeatureInfo featureInfo = new global::Reqnroll.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "Features", "Spilhåndtering", "Som spiller\r\nVil jeg kunne oprette, deltage i, starte og spille Ludo-spil\r\nSå jeg" +
                " kan nyde at spille Ludo med andre spillere", global::Reqnroll.ProgrammingLanguage.CSharp, featureTags);
        
        private Xunit.Abstractions.ITestOutputHelper _testOutputHelper;
        
#line 1 "Game.feature"
#line hidden
        
        public SpilhandteringFeature(SpilhandteringFeature.FixtureData fixtureData, Xunit.Abstractions.ITestOutputHelper testOutputHelper)
        {
            this._testOutputHelper = testOutputHelper;
        }
        
        public static async System.Threading.Tasks.Task FeatureSetupAsync()
        {
        }
        
        public static async System.Threading.Tasks.Task FeatureTearDownAsync()
        {
        }
        
        public async System.Threading.Tasks.Task TestInitializeAsync()
        {
            testRunner = global::Reqnroll.TestRunnerManager.GetTestRunnerForAssembly(featureHint: featureInfo);
            if (((testRunner.FeatureContext != null) 
                        && (testRunner.FeatureContext.FeatureInfo.Equals(featureInfo) == false)))
            {
                await testRunner.OnFeatureEndAsync();
            }
            if ((testRunner.FeatureContext == null))
            {
                await testRunner.OnFeatureStartAsync(featureInfo);
            }
        }
        
        public async System.Threading.Tasks.Task TestTearDownAsync()
        {
            await testRunner.OnScenarioEndAsync();
            global::Reqnroll.TestRunnerManager.ReleaseTestRunner(testRunner);
        }
        
        public void ScenarioInitialize(global::Reqnroll.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioInitialize(scenarioInfo);
            testRunner.ScenarioContext.ScenarioContainer.RegisterInstanceAs<Xunit.Abstractions.ITestOutputHelper>(_testOutputHelper);
        }
        
        public async System.Threading.Tasks.Task ScenarioStartAsync()
        {
            await testRunner.OnScenarioStartAsync();
        }
        
        public async System.Threading.Tasks.Task ScenarioCleanupAsync()
        {
            await testRunner.CollectScenarioErrorsAsync();
        }
        
        public virtual async System.Threading.Tasks.Task FeatureBackgroundAsync()
        {
#line 7
#line hidden
#line 8
  await testRunner.GivenAsync("at spiltjenesten er tilgængelig", ((string)(null)), ((global::Reqnroll.Table)(null)), "Given ");
#line hidden
        }
        
        async System.Threading.Tasks.Task Xunit.IAsyncLifetime.InitializeAsync()
        {
            await this.TestInitializeAsync();
        }
        
        async System.Threading.Tasks.Task Xunit.IAsyncLifetime.DisposeAsync()
        {
            await this.TestTearDownAsync();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Hent alle spil")]
        [Xunit.TraitAttribute("FeatureTitle", "Spilhåndtering")]
        [Xunit.TraitAttribute("Description", "Hent alle spil")]
        public async System.Threading.Tasks.Task HentAlleSpil()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("Hent alle spil", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 10
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 7
await this.FeatureBackgroundAsync();
#line hidden
#line 11
  await testRunner.WhenAsync("jeg anmoder om alle spil", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 12
  await testRunner.ThenAsync("bør jeg modtage en liste over spil", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Hent et specifikt spil")]
        [Xunit.TraitAttribute("FeatureTitle", "Spilhåndtering")]
        [Xunit.TraitAttribute("Description", "Hent et specifikt spil")]
        public async System.Threading.Tasks.Task HentEtSpecifiktSpil()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("Hent et specifikt spil", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 14
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 7
await this.FeatureBackgroundAsync();
#line hidden
#line 15
  await testRunner.GivenAsync("at et spil med id 1 eksisterer", ((string)(null)), ((global::Reqnroll.Table)(null)), "Given ");
#line hidden
#line 16
  await testRunner.WhenAsync("jeg anmoder om spil med id 1", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 17
  await testRunner.ThenAsync("bør jeg modtage spillets detaljer", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Hent et ikke-eksisterende spil")]
        [Xunit.TraitAttribute("FeatureTitle", "Spilhåndtering")]
        [Xunit.TraitAttribute("Description", "Hent et ikke-eksisterende spil")]
        public async System.Threading.Tasks.Task HentEtIkke_EksisterendeSpil()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("Hent et ikke-eksisterende spil", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 19
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 7
await this.FeatureBackgroundAsync();
#line hidden
#line 20
  await testRunner.GivenAsync("at intet spil med id 999 eksisterer", ((string)(null)), ((global::Reqnroll.Table)(null)), "Given ");
#line hidden
#line 21
  await testRunner.WhenAsync("jeg anmoder om spil med id 999", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 22
  await testRunner.ThenAsync("bør jeg ikke modtage noget indhold", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Opret et nyt spil")]
        [Xunit.TraitAttribute("FeatureTitle", "Spilhåndtering")]
        [Xunit.TraitAttribute("Description", "Opret et nyt spil")]
        public async System.Threading.Tasks.Task OpretEtNytSpil()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("Opret et nyt spil", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 24
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 7
await this.FeatureBackgroundAsync();
#line hidden
#line 25
  await testRunner.GivenAsync("en spiller med id 1 eksisterer", ((string)(null)), ((global::Reqnroll.Table)(null)), "Given ");
#line hidden
#line 26
  await testRunner.WhenAsync("jeg opretter et nyt spil med spiller id 1", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 27
  await testRunner.ThenAsync("bør spillet oprettes succesfuldt", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
#line 28
  await testRunner.AndAsync("spiller 1 bør være i spillet", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Deltag i et eksisterende spil")]
        [Xunit.TraitAttribute("FeatureTitle", "Spilhåndtering")]
        [Xunit.TraitAttribute("Description", "Deltag i et eksisterende spil")]
        public async System.Threading.Tasks.Task DeltagIEtEksisterendeSpil()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("Deltag i et eksisterende spil", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 30
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 7
await this.FeatureBackgroundAsync();
#line hidden
#line 31
  await testRunner.GivenAsync("at et spil med id 1 eksisterer", ((string)(null)), ((global::Reqnroll.Table)(null)), "Given ");
#line hidden
#line 32
  await testRunner.AndAsync("en spiller med id 2 eksisterer", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 33
  await testRunner.WhenAsync("spiller 2 deltager i spil 1", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 34
  await testRunner.ThenAsync("bør spil 1 inkludere spiller 2", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Deltag i et ikke-eksisterende spil")]
        [Xunit.TraitAttribute("FeatureTitle", "Spilhåndtering")]
        [Xunit.TraitAttribute("Description", "Deltag i et ikke-eksisterende spil")]
        public async System.Threading.Tasks.Task DeltagIEtIkke_EksisterendeSpil()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("Deltag i et ikke-eksisterende spil", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 36
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 7
await this.FeatureBackgroundAsync();
#line hidden
#line 37
  await testRunner.GivenAsync("at intet spil med id 999 eksisterer", ((string)(null)), ((global::Reqnroll.Table)(null)), "Given ");
#line hidden
#line 38
  await testRunner.WhenAsync("spiller 2 forsøger at deltage i spil 999", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 39
  await testRunner.ThenAsync("bør der returneres en fejl", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Start et spil")]
        [Xunit.TraitAttribute("FeatureTitle", "Spilhåndtering")]
        [Xunit.TraitAttribute("Description", "Start et spil")]
        public async System.Threading.Tasks.Task StartEtSpil()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("Start et spil", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 41
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 7
await this.FeatureBackgroundAsync();
#line hidden
#line 42
  await testRunner.GivenAsync("at et spil med id 1 eksisterer", ((string)(null)), ((global::Reqnroll.Table)(null)), "Given ");
#line hidden
#line 43
  await testRunner.AndAsync("spillet har nok spillere", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 44
  await testRunner.AndAsync("en spiller med id 1 er i spillet", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 45
  await testRunner.WhenAsync("spiller 1 starter spil 1", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 46
  await testRunner.ThenAsync("bør spil 1 være i gang", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Kast terningen")]
        [Xunit.TraitAttribute("FeatureTitle", "Spilhåndtering")]
        [Xunit.TraitAttribute("Description", "Kast terningen")]
        public async System.Threading.Tasks.Task KastTerningen()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("Kast terningen", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 48
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 7
await this.FeatureBackgroundAsync();
#line hidden
#line 49
  await testRunner.GivenAsync("at et spil med id 1 er i gang", ((string)(null)), ((global::Reqnroll.Table)(null)), "Given ");
#line hidden
#line 50
  await testRunner.AndAsync("det er spiller 1 tur", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 51
  await testRunner.WhenAsync("spiller 1 kaster terningen i spil 1", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 52
  await testRunner.ThenAsync("bør terningekastets resultat returneres", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
#line 53
  await testRunner.AndAsync("spillets tilstand bør opdateres", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Spil en tur")]
        [Xunit.TraitAttribute("FeatureTitle", "Spilhåndtering")]
        [Xunit.TraitAttribute("Description", "Spil en tur")]
        public async System.Threading.Tasks.Task SpilEnTur()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("Spil en tur", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 55
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 7
await this.FeatureBackgroundAsync();
#line hidden
#line 56
  await testRunner.GivenAsync("at et spil med id 1 er i gang", ((string)(null)), ((global::Reqnroll.Table)(null)), "Given ");
#line hidden
#line 57
  await testRunner.AndAsync("det er spiller 1 tur", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 58
  await testRunner.AndAsync("spiller 1 har kastet terningen", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 59
  await testRunner.WhenAsync("spiller 1 spiller en brik i spil 1", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 60
  await testRunner.ThenAsync("bør brikken flyttes tilsvarende", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
#line 61
  await testRunner.AndAsync("spillets tilstand bør opdateres", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Forsøg på ugyldigt træk")]
        [Xunit.TraitAttribute("FeatureTitle", "Spilhåndtering")]
        [Xunit.TraitAttribute("Description", "Forsøg på ugyldigt træk")]
        public async System.Threading.Tasks.Task ForsogPaUgyldigtTraek()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("Forsøg på ugyldigt træk", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 63
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 7
await this.FeatureBackgroundAsync();
#line hidden
#line 64
  await testRunner.GivenAsync("at et spil med id 1 er i gang", ((string)(null)), ((global::Reqnroll.Table)(null)), "Given ");
#line hidden
#line 65
  await testRunner.AndAsync("det er spiller 1 tur", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 66
  await testRunner.AndAsync("spiller 1 har kastet terningen", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 67
  await testRunner.WhenAsync("spiller 1 forsøger et ugyldigt træk i spil 1", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 68
  await testRunner.ThenAsync("bør der returneres en fejl", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
#line 69
  await testRunner.AndAsync("spillets tilstand bør forblive uændret", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("Reqnroll", "2.0.0.0")]
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
        public class FixtureData : object, Xunit.IAsyncLifetime
        {
            
            async System.Threading.Tasks.Task Xunit.IAsyncLifetime.InitializeAsync()
            {
                await SpilhandteringFeature.FeatureSetupAsync();
            }
            
            async System.Threading.Tasks.Task Xunit.IAsyncLifetime.DisposeAsync()
            {
                await SpilhandteringFeature.FeatureTearDownAsync();
            }
        }
    }
}
#pragma warning restore
#endregion
